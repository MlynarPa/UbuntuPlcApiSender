using UbuntuPlcApiSender.Services;
using System.Collections.Concurrent;

Console.WriteLine("=== Ubuntu PLC API Sender - Robustn√≠ verze ===");
Console.WriteLine("Automatick√© obnovov√°n√≠ spojen√≠ + Fallback re≈æim + Persistentn√≠ data");
Console.WriteLine();

// Konfigurace
var plcIpAddress = "192.168.0.10";
var plcRack = (short)0;
var plcSlot = (short)1;
var apiBaseUrl = "https://drevostroj.app";
var apiKey = "drevostrojapi2024";
var plcReadInterval = 1000; // 1 sekunda pro ƒçten√≠ PLC
var apiSendInterval = 1000; // 1 sekunda pro odes√≠l√°n√≠ API
var healthReportInterval = 30000; // 30 sekund pro health report

// Konfigurace stroj≈Ø
var machinesWithApi = new[] { "DRS_0001" };
var allMachineNames = new[] { "DRS_0001", "DRS_0002", "DRS_0003", "DRS_0004" };

// Slu≈æby
var plcReader = new PlcReader(plcIpAddress, plcRack, plcSlot);
var apiClient = new ApiClient(apiBaseUrl, apiKey);
var connectionManager = new ConnectionManager();

// Thread-safe storage
var currentMachineData = new ConcurrentDictionary<string, UbuntuPlcApiSender.Models.Machine>();

Console.WriteLine("=== KONFIGURACE ===");
Console.WriteLine($"PLC IP: {plcIpAddress}");
Console.WriteLine($"API URL: {apiBaseUrl}/api/MachinesApi/{{machineId}}");
Console.WriteLine($"Interval ƒçten√≠ PLC: {plcReadInterval}ms");
Console.WriteLine($"Interval odes√≠l√°n√≠ API: {apiSendInterval}ms");
Console.WriteLine($"Fallback pr√°h: 10 sekund");
Console.WriteLine($"Stroje na API: {string.Join(", ", machinesWithApi)}");
Console.WriteLine($"V≈°echny stroje: {string.Join(", ", allMachineNames)}");
Console.WriteLine("Re≈æim: Robustn√≠ s automatick√Ωm obnovov√°n√≠m spojen√≠");
Console.WriteLine();

// Graceful shutdown
var cts = new CancellationTokenSource();
Console.CancelKeyPress += (_, e) =>
{
    e.Cancel = true;
    cts.Cancel();
    Console.WriteLine("\n--- Ukonƒçov√°n√≠ aplikace... ---");
};

// Zachycen√≠ neoƒçek√°van√Ωch chyb
AppDomain.CurrentDomain.UnhandledException += (sender, e) =>
{
    Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üí• Kritick√° chyba: {e.ExceptionObject}");
    connectionManager.SaveStatesOnExit();
};

Console.WriteLine("Pro ukonƒçen√≠ stisknƒõte Ctrl+C");
Console.WriteLine();
Console.WriteLine("--- Spou≈°t√≠m robustn√≠ monitoring syst√©m ---");

// Task 1: Robustn√≠ ƒçten√≠ z PLC s automatick√Ωm obnovov√°n√≠m
var plcReadTask = Task.Run(async () =>
{
    var iteration = 0;
    var lastHealthReport = DateTime.MinValue;
    
    while (!cts.Token.IsCancellationRequested)
    {
        iteration++;
        var readSuccess = false;
        
        try
        {
            // Pokus o ƒçten√≠ dat z PLC
            if (plcReader.TryReadMachinesByAliases(allMachineNames, out var machines, out var errorMessage))
            {
                readSuccess = true;
                connectionManager.UpdateConnectionStatus(true);
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üìä PLC #{iteration} - Naƒçteno {machines.Count} stroj≈Ø (≈ΩIV√Å DATA):");
                
                foreach (var machine in machines)
                {
                    // Aktualizovat connection manager a lok√°ln√≠ cache
                    connectionManager.UpdateMachineState(machine);
                    currentMachineData.AddOrUpdate(machine.Abbreviation, machine, (key, oldValue) => machine);
                    
                    var apiStatus = machinesWithApi.Contains(machine.Abbreviation) ? "‚ÜíAPI" : "lok√°lnƒõ";
                    Console.WriteLine($"  ‚Ä¢ {machine.Abbreviation}: {machine.PowerConsumption}W | DI1:{machine.DI1} | DI2:{machine.DI2} | Bƒõ≈æ√≠:{machine.IsRunning} ({apiStatus})");
                }
            }
            else
            {
                // PLC ƒçten√≠ selhalo - pou≈æij fallback data
                connectionManager.UpdateConnectionStatus(false);
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîÑ PLC #{iteration} - Spojen√≠ selhalo, pou≈æ√≠v√°m FALLBACK data:");
                Console.WriteLine($"  Chyba: {errorMessage}");
                
                // Generuj fallback data pro v≈°echny stroje
                foreach (var machineName in allMachineNames)
                {
                    var fallbackMachine = connectionManager.GetFallbackData(machineName);
                    if (fallbackMachine != null)
                    {
                        currentMachineData.AddOrUpdate(machineName, fallbackMachine, (key, oldValue) => fallbackMachine);
                        
                        var apiStatus = machinesWithApi.Contains(machineName) ? "‚ÜíAPI" : "lok√°lnƒõ";
                        var dataType = fallbackMachine.PowerConsumption == -999 ? "FALLBACK" : "CACHED";
                        Console.WriteLine($"  ‚Ä¢ {machineName}: {fallbackMachine.PowerConsumption}W | DI1:{fallbackMachine.DI1} | DI2:{fallbackMachine.DI2} | Bƒõ≈æ√≠:{fallbackMachine.IsRunning} ({apiStatus}) [{dataType}]");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            connectionManager.UpdateConnectionStatus(false);
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå PLC #{iteration} - Neoƒçek√°van√° chyba: {ex.Message}");
        }

        // Periodick√Ω health report
        if (DateTime.UtcNow - lastHealthReport > TimeSpan.FromMilliseconds(healthReportInterval))
        {
            var health = connectionManager.GetConnectionHealth();
            Console.WriteLine($"\n[{DateTime.Now:HH:mm:ss}] üè• HEALTH: Spojen√≠={health["IsConnected"]}, Selh√°n√≠={health["ConsecutiveFailures"]}, Bez spojen√≠={health["TimeSinceLastConnection"]}");
            lastHealthReport = DateTime.UtcNow;
        }

        try
        {
            await Task.Delay(plcReadInterval, cts.Token);
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

// Task 2: Kontinu√°ln√≠ odes√≠l√°n√≠ na API (i p≈ôi v√Ωpadku PLC)
var apiSendTask = Task.Run(async () =>
{
    var iteration = 0;
    await Task.Delay(500); // Kr√°tk√© zpo≈ædƒõn√≠ pro prvn√≠ data
    
    while (!cts.Token.IsCancellationRequested)
    {
        iteration++;
        var successCount = 0;
        var totalToSend = 0;
        
        foreach (var machineId in machinesWithApi)
        {
            totalToSend++;
            
            if (currentMachineData.TryGetValue(machineId, out var machine))
            {
                try
                {
                    var success = await apiClient.SendMachineDataAsync(machineId, machine);
                    
                    if (success)
                    {
                        successCount++;
                        var dataSource = machine.PowerConsumption == -999 ? "FALLBACK" : "≈ΩIV√Å";
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úì API #{iteration} - {machineId} odesl√°n ({dataSource} data)");
                    }
                    else
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úó API #{iteration} - Chyba p≈ôi odes√≠l√°n√≠ {machineId}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå API #{iteration} - V√Ωjimka p≈ôi odes√≠l√°n√≠ {machineId}: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ö†Ô∏è  API #{iteration} - ≈Ω√°dn√° data pro {machineId}");
            }
        }
        
        if (totalToSend > 0 && successCount < totalToSend)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üìä API #{iteration} - Odesl√°no {successCount}/{totalToSend} stroj≈Ø");
        }

        try
        {
            await Task.Delay(apiSendInterval, cts.Token);
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

// Task 3: Monitoring a reporting
var monitorTask = Task.Run(async () =>
{
    await Task.Delay(10000); // Poƒçkat na stabilizaci
    
    while (!cts.Token.IsCancellationRequested)
    {
        try
        {
            Console.WriteLine($"\n[{DateTime.Now:HH:mm:ss}] üìà === P≈òEHLED V≈†ECH STROJ≈Æ ===");
            
            foreach (var machineName in allMachineNames)
            {
                if (currentMachineData.TryGetValue(machineName, out var machine))
                {
                    var age = DateTime.UtcNow - machine.Timestamp;
                    var apiStatus = machinesWithApi.Contains(machineName) ? "‚úì API" : "‚óã Lok√°lnƒõ";
                    var dataType = machine.PowerConsumption == -999 ? "[FALLBACK]" : "[≈ΩIV√Å]";
                    var connectionStatus = connectionManager.ShouldUseFallbackData(machineName) ? "‚ùå" : "‚úÖ";
                    
                    Console.WriteLine($"  {connectionStatus} {machineName}: {machine.PowerConsumption}W | DI1:{machine.DI1} | DI2:{machine.DI2} | Bƒõ≈æ√≠:{machine.IsRunning} | {apiStatus} | St√°≈ô√≠:{age.TotalSeconds:F1}s {dataType}");
                }
                else
                {
                    Console.WriteLine($"  ‚ùì {machineName}: ≈Ω√°dn√° data");
                }
            }
            
            var health = connectionManager.GetConnectionHealth();
            Console.WriteLine($"  üîó PLC: {(connectionManager.IsPlcConnected ? "P≈òIPOJENO" : "ODPOJENO")} | Selh√°n√≠: {health["ConsecutiveFailures"]} | Bez spojen√≠: {health["TimeSinceLastConnection"]}");
            Console.WriteLine();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ö†Ô∏è  Chyba v monitoring √∫kolu: {ex.Message}");
        }
        
        try
        {
            await Task.Delay(30000, cts.Token); // Ka≈æd√Ωch 30 sekund
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

// Spustit v≈°echny √∫koly
try
{
    await Task.WhenAll(plcReadTask, apiSendTask, monitorTask);
}
catch (OperationCanceledException)
{
    Console.WriteLine("--- √ökoly byly zru≈°eny ---");
}
catch (Exception ex)
{
    Console.WriteLine($"--- Neoƒçek√°van√° chyba v hlavn√≠ch √∫kolech: {ex.Message} ---");
}

// Cleanup
Console.WriteLine("--- Ukl√°d√°m fin√°ln√≠ stavy... ---");
connectionManager.SaveStatesOnExit();
apiClient.Dispose();
plcReader.Close();
Console.WriteLine("--- Aplikace ukonƒçena ---");
