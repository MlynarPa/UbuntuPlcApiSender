using UbuntuPlcApiSender.Services;
using System.Collections.Concurrent;
using System.Text.Json;

Console.WriteLine("=== Ubuntu PLC API Sender - V≈°echny stroje ===");
Console.WriteLine("Tato aplikace ƒçte data ze v≈°ech 4 stroj≈Ø z PLC");
Console.WriteLine("a odes√≠l√° jen vybran√© stroje na drevostroj.app API");
Console.WriteLine();

// Konfigurace
var plcIpAddress = "192.168.0.10";
var plcRack = (short)0;
var plcSlot = (short)1;
var apiBaseUrl = "https://drevostroj.app";
var apiKey = "drevostrojapi2024";
var plcReadInterval = 1000; // 1 sekunda pro ƒçten√≠ PLC
var apiSendInterval = 1000; // 1 sekunda pro odes√≠l√°n√≠ API

// Konfigurace stroj≈Ø pro API (m≈Ø≈æete pou≈æ√≠t jak√©koli aliasy)
var machinesWithApi = new[] { "DRS_0001" }; // M≈Ø≈æete pou≈æ√≠t DRS_0001, DRST_0001, DRS1, DRST1 atd.
var allMachineNames = new[] { "DRS_0001", "DRS_0002", "DRS_0003", "DRS_0004" }; // Pou≈æ√≠v√°me DRS n√°zvy

// Thread-safe storage pro data ze v≈°ech stroj≈Ø
var allMachinesData = new ConcurrentDictionary<string, UbuntuPlcApiSender.Models.Machine>();

Console.WriteLine("=== KONFIGURACE ===");
Console.WriteLine($"PLC IP: {plcIpAddress}");
Console.WriteLine($"PLC Rack: {plcRack}, Slot: {plcSlot}");
Console.WriteLine($"API URL: {apiBaseUrl}/api/MachinesApi/{{machineId}}");
Console.WriteLine($"API Key: {apiKey}");
Console.WriteLine($"Interval ƒçten√≠ PLC: {plcReadInterval}ms");
Console.WriteLine($"Interval odes√≠l√°n√≠ API: {apiSendInterval}ms");
Console.WriteLine($"V≈°echny stroje v PLC: {string.Join(", ", allMachineNames)}");
Console.WriteLine($"Stroje odes√≠lan√© na API: {string.Join(", ", machinesWithApi)}");
Console.WriteLine("Re≈æim: ƒåte v≈°echny stroje, odes√≠l√° jen vybran√© (s podporou alias≈Ø)");
Console.WriteLine($"Podporovan√© aliasy: {string.Join(", ", plcReader.GetSupportedMachineNames())}");
Console.WriteLine();

var plcReader = new PlcReader(plcIpAddress, plcRack, plcSlot);
var apiClient = new ApiClient(apiBaseUrl, apiKey);

Console.WriteLine("Pro ukonƒçen√≠ stisknƒõte Ctrl+C");
Console.WriteLine();
Console.WriteLine("--- Zaƒç√≠naj√≠ paraleln√≠ √∫koly: ƒçten√≠ v≈°ech stroj≈Ø a selektivn√≠ odes√≠l√°n√≠ API ---");

// CancellationToken pro elegantn√≠ ukonƒçen√≠
var cts = new CancellationTokenSource();
Console.CancelKeyPress += (_, e) =>
{
    e.Cancel = true;
    cts.Cancel();
    Console.WriteLine("\n--- Ukonƒçov√°n√≠ aplikace... ---");
};

// Task 1: ƒåten√≠ V≈†ECH stroj≈Ø z PLC ka≈ædou sekundu
var plcReadTask = Task.Run(async () =>
{
    var iteration = 0;
    while (!cts.Token.IsCancellationRequested)
    {
        iteration++;
        
        // ƒåteme data pomoc√≠ alias≈Ø (DRS n√°zvy)
        if (plcReader.TryReadMachinesByAliases(allMachineNames, out var machines, out var errorMessage))
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üìä PLC #{iteration} - Naƒçteno {machines.Count} stroj≈Ø:");
            
            foreach (var machine in machines)
            {
                // Ulo≈æit data pro v≈°echny stroje (s p≈Øvodn√≠m aliasem)
                allMachinesData.AddOrUpdate(machine.Abbreviation, machine, (key, oldValue) => machine);
                
                // Zobrazit data pro ka≈æd√Ω stroj
                var apiStatus = machinesWithApi.Contains(machine.Abbreviation) ? "‚ÜíAPI" : "lok√°lnƒõ";
                Console.WriteLine($"  ‚Ä¢ {machine.Abbreviation}: {machine.PowerConsumption}W | DI1:{machine.DI1} | DI2:{machine.DI2} | Bƒõ≈æ√≠:{machine.IsRunning} ({apiStatus})");
            }
        }
        else
        {
            var message = string.IsNullOrWhiteSpace(errorMessage)
                ? "PLC data se nepoda≈ôilo naƒç√≠st."
                : errorMessage;

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå PLC #{iteration} - {message}");
        }

        try
        {
            await Task.Delay(plcReadInterval, cts.Token);
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

// Task 2: Odes√≠l√°n√≠ jen VYBRAN√ùCH stroj≈Ø na API ka≈ædou sekundu
var apiSendTask = Task.Run(async () =>
{
    var iteration = 0;
    await Task.Delay(100); // Mal√© zpo≈ædƒõn√≠ aby PLC stihlo naƒç√≠st prvn√≠ data
    
    while (!cts.Token.IsCancellationRequested)
    {
        iteration++;
        
        var successCount = 0;
        var totalToSend = 0;
        
        foreach (var machineId in machinesWithApi)
        {
            totalToSend++;
            
            if (allMachinesData.TryGetValue(machineId, out var machine))
            {
                var success = await apiClient.SendMachineDataAsync(machineId, machine);
                
                if (success)
                {
                    successCount++;
                }
                else
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úó API #{iteration} - Chyba p≈ôi odes√≠l√°n√≠ {machineId}");
                }
            }
            else
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ö†Ô∏è  API #{iteration} - ≈Ω√°dn√° data pro {machineId}");
            }
        }
        
        if (totalToSend > 0)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úì API #{iteration} - Odesl√°no {successCount}/{totalToSend} stroj≈Ø");
        }

        try
        {
            await Task.Delay(apiSendInterval, cts.Token);
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

// Task 3: Voliteln√Ω monitoring task - zobrazuje p≈ôehled ka≈æd√Ωch 10 sekund
var monitorTask = Task.Run(async () =>
{
    await Task.Delay(5000); // Poƒçkat na prvn√≠ data
    
    while (!cts.Token.IsCancellationRequested)
    {
        Console.WriteLine($"\n[{DateTime.Now:HH:mm:ss}] üìà === P≈òEHLED V≈†ECH STROJ≈Æ ===");
        
        foreach (var machineName in allMachineNames)
        {
            if (allMachinesData.TryGetValue(machineName, out var machine))
            {
                var age = DateTime.UtcNow - machine.Timestamp;
                var apiStatus = machinesWithApi.Contains(machineName) ? "‚úì API" : "‚óã Lok√°lnƒõ";
                Console.WriteLine($"  {machineName}: {machine.PowerConsumption}W | DI1:{machine.DI1} | DI2:{machine.DI2} | Bƒõ≈æ√≠:{machine.IsRunning} | {apiStatus} | St√°≈ô√≠:{age.TotalSeconds:F1}s");
            }
            else
            {
                Console.WriteLine($"  {machineName}: ‚ùå ≈Ω√°dn√° data");
            }
        }
        Console.WriteLine();
        
        try
        {
            await Task.Delay(10000, cts.Token); // Ka≈æd√Ωch 10 sekund
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

// ƒåek√°n√≠ na dokonƒçen√≠ v≈°ech √∫kol≈Ø
await Task.WhenAll(plcReadTask, apiSendTask, monitorTask);

// Cleanup
apiClient.Dispose();
plcReader.Close();
Console.WriteLine("--- Aplikace ukonƒçena ---");
