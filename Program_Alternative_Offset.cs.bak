using UbuntuPlcApiSender.Services;
using System.Collections.Concurrent;

Console.WriteLine("=== Ubuntu PLC API Sender - Alternativn√≠ ≈ôe≈°en√≠ s offsetem ===");
Console.WriteLine("Tato verze st≈ô√≠d√° ƒçten√≠ PLC a odes√≠l√°n√≠ API po 0,5 sekundy");
Console.WriteLine("0,0s: ƒåte PLC | 0,5s: Odes√≠l√° API | 1,0s: ƒåte PLC | 1,5s: Odes√≠l√° API...");
Console.WriteLine();

// Konfigurace
var plcIpAddress = "192.168.0.10";
var plcRack = (short)0;
var plcSlot = (short)1;
var apiBaseUrl = "https://drevostroj.app";
var apiKey = "drevostrojapi2024";
var baseInterval = 500; // 0,5 sekundy

Console.WriteLine("=== KONFIGURACE ===");
Console.WriteLine($"PLC IP: {plcIpAddress}");
Console.WriteLine($"API URL: {apiBaseUrl}/api/MachinesApi/DRST_0001");
Console.WriteLine($"Z√°kladn√≠ interval: {baseInterval}ms");
Console.WriteLine("Re≈æim: St≈ô√≠dav√© √∫koly s offsetem");
Console.WriteLine();

var plcReader = new PlcReader(plcIpAddress, plcRack, plcSlot);
var apiClient = new ApiClient(apiBaseUrl, apiKey);
UbuntuPlcApiSender.Models.Machine? latestMachine = null;

Console.WriteLine("Pro ukonƒçen√≠ stisknƒõte Ctrl+C");
Console.WriteLine();
Console.WriteLine("--- Zaƒç√≠n√° st≈ô√≠dav√© ƒçten√≠ PLC a odes√≠l√°n√≠ API ---");

var cts = new CancellationTokenSource();
Console.CancelKeyPress += (_, e) =>
{
    e.Cancel = true;
    cts.Cancel();
    Console.WriteLine("\n--- Ukonƒçov√°n√≠ aplikace... ---");
};

var mainTask = Task.Run(async () =>
{
    var iteration = 0;
    var isPlcTurn = true; // true = ƒçten√≠ PLC, false = odes√≠l√°n√≠ API
    
    while (!cts.Token.IsCancellationRequested)
    {
        iteration++;
        
        if (isPlcTurn)
        {
            // ƒåten√≠ z PLC (ka≈ædou lichou iteraci: 0,0s, 1,0s, 2,0s...)
            if (plcReader.TryReadDRST0001(out var machine, out var errorMessage))
            {
                if (machine != null)
                {
                    latestMachine = machine;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä PLC #{iteration/2 + 1} - Data naƒçtena:");
                    Console.WriteLine($"  ‚Ä¢ Spot≈ôeba: {machine.PowerConsumption} W | DI1: {machine.DI1} | DI2: {machine.DI2} | Bƒõ≈æ√≠: {machine.IsRunning}");
                }
                else
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è  PLC #{iteration/2 + 1} - Nepoda≈ôilo se naƒç√≠st data");
                }
            }
            else
            {
                var message = string.IsNullOrWhiteSpace(errorMessage)
                    ? "PLC data se nepoda≈ôilo naƒç√≠st."
                    : errorMessage;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå PLC #{iteration/2 + 1} - {message}");
            }
        }
        else
        {
            // Odes√≠l√°n√≠ na API (ka≈ædou sudou iteraci: 0,5s, 1,5s, 2,5s...)
            if (latestMachine != null)
            {
                var success = await apiClient.SendMachineDataAsync("DRST_0001", latestMachine);
                
                if (success)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úì API #{iteration/2} - Data √∫spƒõ≈°nƒõ odesl√°na");
                }
                else
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úó API #{iteration/2} - Chyba p≈ôi odes√≠l√°n√≠");
                }
            }
            else
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è  API #{iteration/2} - ≈Ω√°dn√° data k odesl√°n√≠");
            }
        }
        
        // St≈ô√≠d√°n√≠ mezi ƒçten√≠m PLC a odes√≠l√°n√≠m API
        isPlcTurn = !isPlcTurn;
        
        try
        {
            await Task.Delay(baseInterval, cts.Token);
        }
        catch (OperationCanceledException)
        {
            break;
        }
    }
}, cts.Token);

await mainTask;

// Cleanup
apiClient.Dispose();
plcReader.Close();
Console.WriteLine("--- Aplikace ukonƒçena ---");
